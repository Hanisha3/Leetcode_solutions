You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: Optional[ListNode]
        :type l2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        
        def rev(list1):
            a = ""
            current = list1
            while current:
                a += str(current.val)
                current = current.next     
            return int(a[::-1])

        op1 = rev(l1)   
        op2 = rev(l2)
        result=str(op1+op2)[::-1]

        mylist=ListNode()
        current = mylist

        for i in result:
            current.next = ListNode(int(i))
            current=current.next
        return mylist.next
